/*
 * MouseEvents_Simple
 * 
 * NestSprite provides a simple API for handling mouse events.
 * Subclasses can override the following NestSprite methods
 * to handle mouse events:
 * - mouseClicked()
 * - mouseClickedOutside()
 * - mouseEntered()
 * - mouseExited()
 * - mousePressed()
 * - mousePressedOutside()
 * - mouseReleased()
 * - mouseReleasedOutside()
 * - mouseDown()
 * - mouseUp()
 * - mouseDragged()
 * - mouseMoved()
 * 
 * A NestSprite instance will only receive mouse events if it is
 * currently on the display list, so be sure to addChild() it
 * to NestSpriteContainer or to an other NestSprite that is already
 * on the display list before attempting to handle mouse events.
 * 
 * Many mouse events are only handled if they are within the bounds
 * of the NestSprite instance.  See the MouseEvents_Bounds example for
 * a more in-depth explanation of NestSprite.bounds().
 */

import com.transmote.nest.*;
import com.transmote.nest.events.*;

NestSpriteContainer spriteContainer;

void setup () {
  size(400, 400);
  setupSprites();
}

void draw () {
  background(0);
  spriteContainer.update();
}

void setupSprites () {
  // create a NestSpriteContainer to hold all other NestSprites
  spriteContainer = new NestSpriteContainer(this);
  
  // attach ButtonSprite instances to the SpriteContainer
  ButtonSprite spriteLeft = new ButtonSprite();
  spriteLeft.x = 50;
  spriteLeft.y = 150;
  spriteContainer.addChild(spriteLeft);
  ButtonSprite spriteRight = new ButtonSprite();
  spriteRight.x = 250;
  spriteRight.y = 150;
  spriteContainer.addChild(spriteRight);
  
  // set each ButtonSprite up to handle
  // events generated by the other ButtonSprite
  spriteLeft.addObserver(spriteRight);
  spriteRight.addObserver(spriteLeft);
}
